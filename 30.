o(n^3) APPROACH
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    int k;
    cin>>k;
    int dp[k+1][n];
    memset (dp,0,sizeof(dp));
    for(int t=1;t<k+1;t++){
        for(int d=1;d<n;d++){
            int maxval=dp[t][d-1];
            for(int pd=0;pd<d;pd++){
                if(maxval<arr[d]-arr[pd]+dp[t-1][pd])
                maxval=arr[d]-arr[pd]+dp[t-1][pd];
            }
            dp[t][d]=maxval;
        }
    }
    cout<<dp[k][n-1]<<endl;
    return 0;
}
OPTIMIZED APPROACH-----O(N^2)
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    int k;
    cin>>k;
    int dp[k+1][n];
    memset (dp,0,sizeof(dp));
    for(int t=1;t<k+1;t++){
        int maxval=INT_MIN;
        for(int d=1;d<n;d++){
            if(dp[t-1][d-1]-arr[d-1]>maxval)
            maxval=dp[t-1][d-1]-arr[d-1];
            if(maxval+arr[d]>dp[t][d-1])
            dp[t][d]=maxval+arr[d];
            else
            dp[t][d]=dp[t][d-1];
        }
    }
    cout<<dp[k][n-1]<<endl;
    return 0;
}
